// Copyright 2020-2023 Bloomberg Finance L.P.
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <ntsa_guid.h>

#include <ntscfg_test.h>

#include <bdls_processutil.h>

#include <bslma_testallocator.h>

#include <bsl_cstdlib.h>
#include <bsl_iostream.h>
#include <bsl_sstream.h>
#include <bsl_stdexcept.h>

#if defined(BSLS_PLATFORM__OS_WINDOWS)
#include <ws2tcpip.h>
#endif

using namespace BloombergLP;

//=============================================================================
//                                 TEST PLAN
//-----------------------------------------------------------------------------
//                                 Overview
//                                 --------
// This test driver ensures the basic properties of the GUIDs generated by
// this component: they may be generated, parsed from various representations,
// compared, and formatted.
//-----------------------------------------------------------------------------

//=============================================================================
//                      STANDARD BDE ASSERT TEST MACRO
//-----------------------------------------------------------------------------
static int testStatus = 0;

static void aSsErT(int c, const char* s, int i)
{
    if (c) {
        bsl::cout << "Error " << __FILE__ << "(" << i << "): " << s
                  << "    (failed)" << bsl::endl;
        if (0 <= testStatus && testStatus <= 100)
            ++testStatus;
    }
}

#define ASSERT(X)                                                             \
    {                                                                         \
        aSsErT(!(X), #X, __LINE__);                                           \
    }

//=============================================================================
//                  STANDARD BDE LOOP-ASSERT TEST MACROS
//-----------------------------------------------------------------------------
#define LOOP_ASSERT(I, X)                                                     \
    {                                                                         \
        if (!(X)) {                                                           \
            bsl::cout << #I << ": " << I << "\n";                             \
            aSsErT(1, #X, __LINE__);                                          \
        }                                                                     \
    }

#define LOOP2_ASSERT(I, J, X)                                                 \
    {                                                                         \
        if (!(X)) {                                                           \
            bsl::cout << #I << ": " << I << "\t" << #J << ": " << J << "\n";  \
            aSsErT(1, #X, __LINE__);                                          \
        }                                                                     \
    }

#define LOOP3_ASSERT(I, J, K, X)                                              \
    {                                                                         \
        if (!(X)) {                                                           \
            bsl::cout << #I << ": " << I << "\t" << #J << ": " << J << "\t"   \
                      << #K << ": " << K << "\n";                             \
            aSsErT(1, #X, __LINE__);                                          \
        }                                                                     \
    }

//=============================================================================
//                  SEMI-STANDARD TEST OUTPUT MACROS
//-----------------------------------------------------------------------------
#define P(X) bsl::cout << #X " = " << (X) << bsl::endl;
#define Q(X) bsl::cout << "<| " #X " |>" << bsl::endl;
#define P_(X) bsl::cout << #X " = " << (X) << ", " << bsl::flush;
#define L_ __LINE__
#define NL "\n"
#define T_() bsl::cout << "    " << bsl::flush;

//=============================================================================
//                  GLOBAL TYPEDEFS/CONSTANTS FOR TESTING
//-----------------------------------------------------------------------------

static int verbose             = 0;
static int veryVerbose         = 0;
static int veryVeryVerbose     = 0;
static int veryVeryVeryVerbose = 0;

//=============================================================================
//                        HELPER FUNCTIONS AND CLASSES
//-----------------------------------------------------------------------------

//=============================================================================
//                              MAIN PROGRAM
//-----------------------------------------------------------------------------

int main(int argc, char* argv[])
{
#if defined(BSLS_PLATFORM__OS_WINDOWS)
    WSADATA wsa;
    bsl::memset(&wsa, 0, sizeof wsa);
    WSAStartup(MAKEWORD(2, 2), &wsa);
#endif

    int test            = argc > 1 ? bsl::atoi(argv[1]) : 0;
    verbose             = (argc > 2);
    veryVerbose         = (argc > 3);
    veryVeryVerbose     = (argc > 4);
    veryVeryVeryVerbose = (argc > 5);
    bsl::cout << "TEST " << __FILE__ << " CASE " << test << bsl::endl;
    ;

    switch (test) {
    case 0:  // Zero is always the leading case.
    case 4: {
        // TESTING BASIC OPERATIONS
        //
        // Concerns:
        //   GUIDs may be generated, compared, and have their binary and
        //   textual representations written to buffers.

        ntsa::Guid guid1(ntsa::Guid::generate());
        ntsa::Guid guid2(ntsa::Guid::generate());
        ntsa::Guid invalidGuid3;
        ntsa::Guid invalidGuid4;
        ntsa::Guid invalidGuid5(invalidGuid3);

        if (verbose) {
            bsl::cout << "guid1:" << guid1 << " guid2:" << guid2
                      << " invalidGuid3:" << invalidGuid3
                      << " invalidGuid4:" << invalidGuid4
                      << " invalidGuid5:" << invalidGuid5 << bsl::endl;
        }

        ASSERT(!invalidGuid3.valid());
        ASSERT(!invalidGuid4.valid());
        ASSERT(!invalidGuid5.valid());

        ASSERT(guid1 != guid2);
        ASSERT((guid1 < guid2) == (guid2 > guid1));
        ASSERT((guid1 > guid2) == (guid2 < guid1));
        ntsa::Guid guid1eq(guid1);
        ASSERT(guid1 == guid1eq);

        ASSERT(invalidGuid3 == invalidGuid4);
        ASSERT(guid1 != invalidGuid3);
        ASSERT(invalidGuid3 != guid1);

        ASSERT(guid1.compare(invalidGuid3) != invalidGuid3.compare(guid1));
        ASSERT(guid2.compare(invalidGuid3) != invalidGuid3.compare(guid2));

        char binary[ntsa::Guid::SIZE_BINARY];
        guid1.writeBinary(binary);

        ntsa::Guid guid1bin(ntsa::Guid::BinaryRepresentation(), binary);

        ASSERT(guid1 == guid1bin);

        char text[ntsa::Guid::SIZE_TEXT + 1] = {0};
        guid1.writeText(text);

        if (verbose) {
            bsl::cout << "Text rep: '" << text << "'" << bsl::endl;
        }

        ntsa::Guid guid1text(ntsa::Guid::TextRepresentation(), text);

        ASSERT(guid1 == guid1text);

    } break;
    case 3: {
        // TESTING TEXT TERMINATION
        //
        // Concerns:
        //   writeText does not null-terminate its output.

        ntsa::Guid guid(ntsa::Guid::generate());
        char       text[ntsa::Guid::SIZE_TEXT + 1];
        char       magic =
            static_cast<char>(bdls::ProcessUtil::getProcessId() & 0xFF);
        text[ntsa::Guid::SIZE_TEXT] = magic;
        guid.writeText(text);
        ASSERT(magic == text[ntsa::Guid::SIZE_TEXT]);

    } break;
    case 2: {
        // TESTING GUID GENERATION
        //
        // Concerns:
        //   Generated GUIDs are unique according to the definition and
        //   properties of the implementation.

        ntsa::Guid guid1(ntsa::Guid::generate());
        if (verbose) {
            bsl::cout << "guid1 = " << guid1 << bsl::endl;
        }

        ntsa::Guid guid2(ntsa::Guid::generate());
        if (verbose) {
            bsl::cout << "guid2 = " << guid2 << bsl::endl;
        }

        ASSERT(guid1 != guid2);

        bsl::string guidString1;
        {
            bsl::ostringstream ss;
            ss << guid1;
            guidString1 = ss.str();
        }

        bsl::string guidString2;
        {
            bsl::ostringstream ss;
            ss << guid2;
            guidString2 = ss.str();
        }

        ASSERT(!guidString1.empty());
        ASSERT(!guidString2.empty());

        ASSERT(guidString1 != guidString2);

    } break;
    case 1: {
        // TESTING VALID TEXT REPRESENTATIONS
        //
        // Concerns:
        //   Various text representations of GUIDs are valid.

        ASSERT(ntsa::Guid::isValidTextRepresentation(
            "E7D7031011BB95370000699A7E0A0400"));
        ASSERT(!ntsa::Guid::isValidTextRepresentation(
            "E7D7031011BB95370000699A7E0A040"));
        ASSERT(!ntsa::Guid::isValidTextRepresentation(
            "E7D7031011BB95370000699A7E0A040z"));
        ASSERT(!ntsa::Guid::isValidTextRepresentation(
            "E7D7031011BB95370000699A7E0A04x0"));
        ASSERT(!ntsa::Guid::isValidTextRepresentation(
            "x7D7031011BB95370000699A7E0A0400"));
        ASSERT(!ntsa::Guid::isValidTextRepresentation(
            "ExD7031011BB95370000699A7E0A0400"));
        ASSERT(!ntsa::Guid::isValidTextRepresentation(
            "172.17.1.20:7231:18FEB2011_18:02:17.402393"));

    } break;
    default: {
        bsl::cerr << "WARNING: CASE `" << test << "' NOT FOUND." << bsl::endl;
        testStatus = -1;
    }
    }

    if (testStatus > 0) {
        bsl::cerr << "Error, non-zero test status = " << testStatus << "."
                  << bsl::endl;
    }

#if defined(BSLS_PLATFORM__OS_WINDOWS)
    WSACleanup();
#endif

    return testStatus;
}
